{"version":3,"sources":["latlon-geohash.js","places.ts","mkbdg.ts"],"names":["base32","Geohash","encode","lat","lon","precision","p","hash","posn","decode","Number","isNaN","Error","idx","bit","evenBit","geohash","latMin","latMax","lonMin","lonMax","length","lonMid","latMid","charAt","bounds","sw","ne","toFixed","Math","floor","log","LN10","toLowerCase","i","chr","indexOf","n","bitN","adjacent","direction","neighbour","s","e","w","border","lastCh","slice","parent","type","neighbours"],"mappings":"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","file":"mkbdg.js","sourceRoot":"../bin","sourcesContent":["/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geohash encoding/decoding and associated functions   (c) Chris Veness 2014-2019 / MIT Licence  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nconst base32 = '0123456789bcdefghjkmnpqrstuvwxyz'; // (geohash-specific) Base32 map\n\n\n/**\n * Geohash: Gustavo Niemeyer’s geocoding system.\n */\nclass Geohash {\n\n    /**\n     * Encodes latitude/longitude to geohash, either to specified precision or to automatically\n     * evaluated precision.\n     *\n     * @param   {number} lat - Latitude in degrees.\n     * @param   {number} lon - Longitude in degrees.\n     * @param   {number} [precision] - Number of characters in resulting geohash.\n     * @returns {string} Geohash of supplied latitude/longitude.\n     * @throws  Invalid geohash.\n     *\n     * @example\n     *     const geohash = Geohash.encode(52.205, 0.119, 7); // => 'u120fxw'\n     */\n    static encode(lat, lon, precision) {\n        // infer precision?\n        if (typeof precision == 'undefined') {\n            // refine geohash until it matches precision of supplied lat/lon\n            for (let p=1; p<=12; p++) {\n                const hash = Geohash.encode(lat, lon, p);\n                const posn = Geohash.decode(hash);\n                if (posn.lat==lat && posn.lon==lon) return hash;\n            }\n            precision = 12; // set to maximum\n        }\n\n        lat = Number(lat);\n        lon = Number(lon);\n        precision = Number(precision);\n\n        if (isNaN(lat) || isNaN(lon) || isNaN(precision)) throw new Error('Invalid geohash');\n\n        let idx = 0; // index into base32 map\n        let bit = 0; // each char holds 5 bits\n        let evenBit = true;\n        let geohash = '';\n\n        let latMin =  -90, latMax =  90;\n        let lonMin = -180, lonMax = 180;\n\n        while (geohash.length < precision) {\n            if (evenBit) {\n                // bisect E-W longitude\n                const lonMid = (lonMin + lonMax) / 2;\n                if (lon >= lonMid) {\n                    idx = idx*2 + 1;\n                    lonMin = lonMid;\n                } else {\n                    idx = idx*2;\n                    lonMax = lonMid;\n                }\n            } else {\n                // bisect N-S latitude\n                const latMid = (latMin + latMax) / 2;\n                if (lat >= latMid) {\n                    idx = idx*2 + 1;\n                    latMin = latMid;\n                } else {\n                    idx = idx*2;\n                    latMax = latMid;\n                }\n            }\n            evenBit = !evenBit;\n\n            if (++bit == 5) {\n                // 5 bits gives us a character: append it and start over\n                geohash += base32.charAt(idx);\n                bit = 0;\n                idx = 0;\n            }\n        }\n\n        return geohash;\n    }\n\n\n    /**\n     * Decode geohash to latitude/longitude (location is approximate centre of geohash cell,\n     *     to reasonable precision).\n     *\n     * @param   {string} geohash - Geohash string to be converted to latitude/longitude.\n     * @returns {{lat:number, lon:number}} (Center of) geohashed location.\n     * @throws  Invalid geohash.\n     *\n     * @example\n     *     const latlon = Geohash.decode('u120fxw'); // => { lat: 52.205, lon: 0.1188 }\n     */\n    static decode(geohash) {\n\n        const bounds = Geohash.bounds(geohash); // <-- the hard work\n        // now just determine the centre of the cell...\n\n        const latMin = bounds.sw.lat, lonMin = bounds.sw.lon;\n        const latMax = bounds.ne.lat, lonMax = bounds.ne.lon;\n\n        // cell centre\n        let lat = (latMin + latMax)/2;\n        let lon = (lonMin + lonMax)/2;\n\n        // round to close to centre without excessive precision: ⌊2-log10(Δ°)⌋ decimal places\n        lat = lat.toFixed(Math.floor(2-Math.log(latMax-latMin)/Math.LN10));\n        lon = lon.toFixed(Math.floor(2-Math.log(lonMax-lonMin)/Math.LN10));\n\n        return { lat: Number(lat), lon: Number(lon) };\n    }\n\n\n    /**\n     * Returns SW/NE latitude/longitude bounds of specified geohash.\n     *\n     * @param   {string} geohash - Cell that bounds are required of.\n     * @returns {{sw: {lat: number, lon: number}, ne: {lat: number, lon: number}}}\n     * @throws  Invalid geohash.\n     */\n    static bounds(geohash) {\n        if (geohash.length == 0) throw new Error('Invalid geohash');\n\n        geohash = geohash.toLowerCase();\n\n        let evenBit = true;\n        let latMin =  -90, latMax =  90;\n        let lonMin = -180, lonMax = 180;\n\n        for (let i=0; i<geohash.length; i++) {\n            const chr = geohash.charAt(i);\n            const idx = base32.indexOf(chr);\n            if (idx == -1) throw new Error('Invalid geohash');\n\n            for (let n=4; n>=0; n--) {\n                const bitN = idx >> n & 1;\n                if (evenBit) {\n                    // longitude\n                    const lonMid = (lonMin+lonMax) / 2;\n                    if (bitN == 1) {\n                        lonMin = lonMid;\n                    } else {\n                        lonMax = lonMid;\n                    }\n                } else {\n                    // latitude\n                    const latMid = (latMin+latMax) / 2;\n                    if (bitN == 1) {\n                        latMin = latMid;\n                    } else {\n                        latMax = latMid;\n                    }\n                }\n                evenBit = !evenBit;\n            }\n        }\n\n        const bounds = {\n            sw: { lat: latMin, lon: lonMin },\n            ne: { lat: latMax, lon: lonMax },\n        };\n\n        return bounds;\n    }\n\n\n    /**\n     * Determines adjacent cell in given direction.\n     *\n     * @param   geohash - Cell to which adjacent cell is required.\n     * @param   direction - Direction from geohash (N/S/E/W).\n     * @returns {string} Geocode of adjacent cell.\n     * @throws  Invalid geohash.\n     */\n    static adjacent(geohash, direction) {\n        // based on github.com/davetroy/geohash-js\n\n        geohash = geohash.toLowerCase();\n        direction = direction.toLowerCase();\n\n        if (geohash.length == 0) throw new Error('Invalid geohash');\n        if ('nsew'.indexOf(direction) == -1) throw new Error('Invalid direction');\n\n        const neighbour = {\n            n: [ 'p0r21436x8zb9dcf5h7kjnmqesgutwvy', 'bc01fg45238967deuvhjyznpkmstqrwx' ],\n            s: [ '14365h7k9dcfesgujnmqp0r2twvyx8zb', '238967debc01fg45kmstqrwxuvhjyznp' ],\n            e: [ 'bc01fg45238967deuvhjyznpkmstqrwx', 'p0r21436x8zb9dcf5h7kjnmqesgutwvy' ],\n            w: [ '238967debc01fg45kmstqrwxuvhjyznp', '14365h7k9dcfesgujnmqp0r2twvyx8zb' ],\n        };\n        const border = {\n            n: [ 'prxz',     'bcfguvyz' ],\n            s: [ '028b',     '0145hjnp' ],\n            e: [ 'bcfguvyz', 'prxz'     ],\n            w: [ '0145hjnp', '028b'     ],\n        };\n\n        const lastCh = geohash.slice(-1);    // last character of hash\n        let parent = geohash.slice(0, -1); // hash without last character\n\n        const type = geohash.length % 2;\n\n        // check for edge-cases which don't share common prefix\n        if (border[direction][type].indexOf(lastCh) != -1 && parent != '') {\n            parent = Geohash.adjacent(parent, direction);\n        }\n\n        // append letter for direction to parent\n        return parent + base32.charAt(neighbour[direction][type].indexOf(lastCh));\n    }\n\n\n    /**\n     * Returns all 8 adjacent cells to specified geohash.\n     *\n     * @param   {string} geohash - Geohash neighbours are required of.\n     * @returns {{n,ne,e,se,s,sw,w,nw: string}}\n     * @throws  Invalid geohash.\n     */\n    static neighbours(geohash) {\n        return {\n            'n':  Geohash.adjacent(geohash, 'n'),\n            'ne': Geohash.adjacent(Geohash.adjacent(geohash, 'n'), 'e'),\n            'e':  Geohash.adjacent(geohash, 'e'),\n            'se': Geohash.adjacent(Geohash.adjacent(geohash, 's'), 'e'),\n            's':  Geohash.adjacent(geohash, 's'),\n            'sw': Geohash.adjacent(Geohash.adjacent(geohash, 's'), 'w'),\n            'w':  Geohash.adjacent(geohash, 'w'),\n            'nw': Geohash.adjacent(Geohash.adjacent(geohash, 'n'), 'w'),\n        };\n    }\n\n}\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Geohash;\n","export default [\n  { title: `El Capitan, CA, USA`, lat: 37.733952, lng: -119.637756 },\n  { title: `Raymond James Stadium, FL, USA`, lat: 27.975958, lng: -82.503693 },\n  { title: `St. James’s Park, London, UK`, lat: 51.502464, lng: -0.137 },\n  { title: `Royal Botanic Gardens, Kew`, lat: 51.478298, lng: -0.297954 },\n  { title: `Obelisco de Buenos Aires, Argentina`, lat: -34.60385, lng: -58.381775 },\n  { title: `Hoboken, NJ, USA`, lat: 40.745255, lng: -74.034775 },\n  { title: `Katz's Delicatessen, New York, USA`, lat: 40.722195, lng: -73.98748 },\n  { title: `Brooklyn Bridge Park, New York, USA`, lat: 40.699215, lng: -73.999039 },\n  { title: `The Intrepid Sea, Air & Space Museum, NY, USA`, lat: 40.764389, lng: -73.999786 },\n  { title: `Top of The Rock, New York, USA`, lat: 40.75906, lng: -73.979431 },\n  { title: `The High Line, NY, USA`, lat: 40.747993, lng: -74.00489 },\n  { title: `DLF Mall of India, Uttar Pradesh, India`, lat: 28.56719, lng: 77.320892 },\n  { title: `Mantri Square Mall, Bangalore, India`, lat: 12.991753, lng: 77.569641 },\n  { title: `The National Mall, Washington, USA`, lat: 38.887161, lng: -77.037331 },\n  { title: `Six Flags México, Mexico`, lat: 19.295525, lng: -99.210808 },\n  { title: `Forum Buenavista Centro Comercial, Mexico`, lat: 19.449223, lng: -99.152466 },\n  { title: `Eco Park, Kolkata, India`, lat: 22.60309, lng: 88.466576 },\n  { title: `Lalbagh Botanical Garden, Bengaluru, India`, lat: 12.950771, lng: 77.584236 },\n  { title: `Phoenix Marketcity, Bengaluru, India`, lat: 12.995854, lng: 77.69635 },\n  { title: `Piazza San Marco, Venice, Italy`, lat: 45.434185, lng: 12.337817 },\n  {\n    title: `Sandringham, the birthplace of Diana, Princess of Wales`,\n    lat: 52.827015,\n    lng: 0.515626,\n  },\n  { title: `Universal Orlando Resort, FL, USA`, lat: 28.474386, lng: -81.468193 },\n  { title: `Costanera Center, Chile`, lat: -33.41798, lng: -70.607224 },\n  { title: `Christmas Place, TN, USA`, lat: 35.809563, lng: -83.578728 },\n  { title: `Bronner's CHRISTmas Wonderland, MI, USA`, lat: 43.313988, lng: -83.737228 },\n  { title: `Beto Carrero World, Penha, Brazil`, lat: -26.80164, lng: -48.61768 },\n  { title: `Rockefeller Center, NY, USA`, lat: 40.758678, lng: -73.978798 },\n  { title: `Sri Harmandir Sahib, Amritsar, India`, lat: 31.620132, lng: 74.876091 },\n  { title: `Orion Mall, Bangalore, India`, lat: 13.011053, lng: 77.554939 },\n  { title: `Disney Springs, FL, USA`, lat: 28.37097, lng: -81.519249 },\n  { title: `Champ de Mars, Paris, France`, lat: 48.855633, lng: 2.298337 },\n  { title: `Lulu International Shopping Mall, Kerala, India`, lat: 10.026617, lng: 76.308411 },\n  { title: `Municipal Market of São Paulo, Brazil`, lat: -23.54181, lng: -46.629387 },\n  { title: `Alexanderplatz, Berlin, Germany`, lat: 52.521992, lng: 13.413244 },\n  { title: `Magic Kingdom Park, FL, USA`, lat: 28.417665, lng: -81.581238 },\n  { title: `The Maidan, Kolkata, India`, lat: 22.554443, lng: 88.340569 },\n  { title: `Mysore Palace, Karnataka, India`, lat: 12.305199, lng: 76.654549 },\n  { title: `The India Gate, New Delhi, India`, lat: 28.612894, lng: 77.229446 },\n  { title: `Al-Masjid an-Nabawi, Medina, Saudi Arabia`, lat: 24.467035, lng: 39.610947 },\n  { title: `Gateway Of India Mumbai, Maharashtra, India`, lat: 18.922064, lng: 72.834641 },\n  { title: `Henham Park, which has been home to Latitude Festival`, lat: 52.334541, lng: 1.594031 },\n  {\n    title: `Marlay Park, which has been home to Longitude Festival`,\n    lat: 53.273392,\n    lng: -6.269268,\n  },\n  { title: `The Hollywood Bowl, Los Angeles, USA`, lat: 34.112236, lng: -118.339432 },\n  { title: `Hollywood & Highland, Los Angeles, USA`, lat: 34.10231, lng: -118.340027 },\n  { title: `Intercity Istanbul Park, Turkey`, lat: 40.95787, lng: 29.410341 },\n  { title: `Dodger Stadium, Los Angeles, USA`, lat: 34.073814, lng: -118.240784 },\n  { title: `Macy’s, New York City, USA`, lat: 40.750797, lng: -73.989578 },\n  { title: `9/11 Memorial & Museum, New York, USA`, lat: 40.711449, lng: -74.013855 },\n  { title: `Madame Tussauds New York, USA`, lat: 40.756409, lng: -73.988823 },\n  { title: `Webomaze Pty Ltd, Melbourne, Australia`, lat: -37.821228, lng: 144.962814 },\n  { title: `Wembley Stadium, London, UK`, lat: 51.555973, lng: -0.279672 },\n  { title: `Steventon, the village where Jane Austen was born`, lat: 51.228409, lng: -1.221213 },\n  { title: `Queens Center, NY, USA`, lat: 40.73447, lng: -73.86972 },\n  { title: `The Museum of Modern Art, NY, USA`, lat: 40.761509, lng: -73.978271 },\n  { title: `John F. Kennedy International Airport, NY, USA`, lat: 40.641766, lng: -73.780968 },\n  { title: `The Battery, New York, USA`, lat: 40.703564, lng: -74.016678 },\n  { title: `Bryant Park, New York, USA`, lat: 40.753742, lng: -73.983559 },\n  { title: `Solomon R. Guggenheim Museum, NY, USA`, lat: 40.782951, lng: -73.958992 },\n  { title: `Shusha, Azerbaijan`, lat: 39.757969, lng: 46.741627 },\n  { title: `Göbekli Tepe, Şanlıurfa, Turkey`, lat: 37.223194, lng: 38.922325 },\n  { title: `Strand Bookstore, New York, USA`, lat: 40.733288, lng: -73.990974 },\n  { title: `Shakespeare & Company, Paris, France`, lat: 48.852524, lng: 2.34713 },\n  { title: `Du Pain et des Idées, Paris, France`, lat: 48.871265, lng: 2.362855 },\n  { title: `Conditori La Glace, Copenhagen, Denmark`, lat: 55.678551, lng: 12.573539 },\n  { title: `Dominique Ansel Bakery, New York, USA`, lat: 40.725185, lng: -74.002998 },\n  { title: `Pripyat, Ukraine`, lat: 51.406681, lng: 30.046425 },\n  { title: `Al Naseem Perfume Industry, UAE`, lat: 25.437786, lng: 55.549088 },\n  { title: `Southern Handling Systems, AL, USA`, lat: 32.360279, lng: -86.264862 },\n  { title: `Wave Break Island, Australia`, lat: -27.934725, lng: 153.415543 },\n  { title: `Nazaré, Portugal`, lat: 39.601875, lng: -9.071212 },\n  { title: `Fairchild Communication Systems, Inc.`, lat: 39.814957, lng: -86.044823 },\n  { title: `Inexture Solutions LLP, India`, lat: 23.070438, lng: 72.517693 },\n  { title: `Carlo's Bakery, Hoboken, NJ, USA`, lat: 40.737198, lng: -74.030815 },\n  { title: `Zeit für Brot, Berlin, Germany`, lat: 52.527981, lng: 13.408488 },\n  { title: `Lifestyle Group, Indianapolis, USA`, lat: 39.731449, lng: -86.056862 },\n  { title: `Anne Frank House, Amsterdam, Netherlands`, lat: 52.375191, lng: 4.883928 },\n  { title: `Joe's Pizza, NY, USA`, lat: 40.730522, lng: -74.002205 },\n  { title: `Kona Skate Park, Florida, USA`, lat: 30.323277, lng: -81.564995 },\n  { title: `Black Pearl Skate and Surf Park, Cayman Islands`, lat: 19.282921, lng: -81.345596 },\n  { title: `Breiner Company Incorporated, Avon, USA`, lat: 39.758938, lng: -86.388336 },\n  { title: `Howells Carpet Cleaning, Milwaukie, USA`, lat: 45.454582, lng: -122.585197 },\n  { title: `Burgers N' Fries Forever, Ottawa, Canada`, lat: 45.414356, lng: -75.695282 },\n  { title: `The Azadi Tower, Tehran, Iran`, lat: 35.699444, lng: 51.337776 },\n  {\n    title: `Christmas Island Detention Centre, Christmas Island`,\n    lat: -10.471097,\n    lng: 105.575569,\n  },\n  {\n    title: `Canadian Forces Base Trenton, Quinte West, ON, Canada`,\n    lat: 44.118889,\n    lng: -77.528053,\n  },\n  { title: `Bavaria, Germany`, lat: 48.7775, lng: 11.431111 },\n  { title: `Clarence House, London, England, the UK`, lat: 51.504002, lng: -0.1385 },\n  { title: `La Gomera, the Canary Islands, Spain`, lat: 28.116667, lng: -17.216667 },\n  { title: `Qom City, Qom Province, Iran`, lat: 34.639999, lng: 50.876389 },\n  { title: `Daegu, Yeongnam, South Korea`, lat: 35.866669, lng: 128.600006 },\n  { title: `Guglielmo Marconi Airport, Italy`, lat: 44.535442, lng: 11.288667 },\n  { title: `Lombardy, Italy`, lat: 45.585556, lng: 9.930278 },\n  { title: `Malpensa International Airport, Italy`, lat: 8.723056, lng: 8.723056 },\n  { title: `The Robert Koch Institute, Berlin, Germany`, lat: 52.540207, lng: 13.343626 },\n  {\n    title: `The Chinese Center for Disease Control and Prevention, Beijing, China`,\n    lat: 39.880924,\n    lng: 116.394936,\n  },\n  { title: `Wuhan Central Hospital, Wuhan, Hubei, China`, lat: 30.581322, lng: 114.295181 },\n  { title: `Huoshenshan Hospital, Wuhan, Hubei, China`, lat: 30.5291, lng: 114.082199 },\n  {\n    title: `The Lazzaro Spallanzani National Institute for Infectious Diseases, Italy`,\n    lat: 41.866199,\n    lng: 12.4576,\n  },\n  {\n    title: `The Netherlands National Institute for Public Health and the Environment`,\n    lat: 52.118523,\n    lng: 5.189059,\n  },\n  {\n    title: `The Centers for Disease Control and Prevention, Atlanta, GA, the US`,\n    lat: 33.799442,\n    lng: -84.328331,\n  },\n]\n","import Avatar from 'avatar-builder'\nimport Bottleneck from 'bottleneck'\nimport fs from 'fs'\nimport { dirname, resolve } from 'path'\nimport Sharp from 'sharp'\nimport Geohash from './latlon-geohash'\nimport places from './places'\n\nconst limiter = new Bottleneck({ maxConcurrent: 50 })\n\nconst avatar = Avatar.builder(\n  Avatar.Image.margin(Avatar.Image.circleMask(Avatar.Image.identicon())),\n  512,\n  512,\n  { cache: Avatar.Cache.lru() }\n)\n\nPromise.all(\n  places.map(({ title, lat, lng }) =>\n    limiter.schedule(async () => {\n      const geohash = Geohash.encode(lat, lng, 9)\n      const fout = `./badges/${geohash}.png`\n      console.log(`Writing ${fout}`)\n\n      const binacularsBuf = await Sharp(\n        await fs.readFileSync(resolve(dirname(__filename), '../bin/314101.png'))\n      )\n        .resize(512, 512, {\n          fit: 'inside',\n        })\n        .toBuffer()\n      const baseBuf = await avatar.create(geohash)\n      const base = await Sharp(baseBuf)\n        .composite([{ input: binacularsBuf }])\n        .toFile(fout)\n    })\n  )\n)\n\n// avatar.create('crfxvrfxvrfx').then((buffer) => fs.writeFileSync('avatar-crfxvrfxvrfx.png', buffer))\n// avatar.create('gabriel').then((buffer) => fs.writeFileSync('avatar-gabriel.png', buffer))\n// avatar.create('allaigre').then((buffer) => fs.writeFileSync('avatar-allaigre.png', buffer))\n"]}