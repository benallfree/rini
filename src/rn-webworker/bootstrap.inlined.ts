
export default "(()=>{var g=Object.create,c=Object.defineProperty,w=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty,C=Object.getOwnPropertyNames,E=Object.getOwnPropertyDescriptor;var M=e=>c(e,\"__esModule\",{value:!0});var S=(e,t)=>()=>(t||(t={exports:{}},e(t.exports,t)),t.exports);var x=(e,t,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let s of C(t))!D.call(e,s)&&s!==\"default\"&&c(e,s,{get:()=>t[s],enumerable:!(a=E(t,s))||a.enumerable});return e},N=e=>e&&e.__esModule?e:x(M(c(e!=null?g(w(e)):{},\"default\",{value:e,enumerable:!0})),e);var m=S((P,p)=>{\"use strict\";var i=class extends Error{constructor(t){super(i._prepareSuperMessage(t));Object.defineProperty(this,\"name\",{value:\"NonError\",configurable:!0,writable:!0}),Error.captureStackTrace&&Error.captureStackTrace(this,i)}static _prepareSuperMessage(t){try{return JSON.stringify(t)}catch{return String(t)}}},T=[{property:\"name\",enumerable:!1},{property:\"message\",enumerable:!1},{property:\"stack\",enumerable:!1},{property:\"code\",enumerable:!0}],l=Symbol(\".toJSON called\"),j=e=>{e[l]=!0;let t=e.toJSON();return delete e[l],t},u=({from:e,seen:t,to_:a,forceEnumerable:s})=>{let o=a||(Array.isArray(e)?[]:{});if(t.push(e),typeof e.toJSON==\"function\"&&e[l]!==!0)return j(e);for(let[r,n]of Object.entries(e)){if(typeof Buffer==\"function\"&&Buffer.isBuffer(n)){o[r]=\"[object Buffer]\";continue}if(typeof n!=\"function\"){if(!n||typeof n!=\"object\"){o[r]=n;continue}if(!t.includes(e[r])){o[r]=u({from:e[r],seen:t.slice(),forceEnumerable:s});continue}o[r]=\"[Circular]\"}}for(let{property:r,enumerable:n}of T)typeof e[r]==\"string\"&&Object.defineProperty(o,r,{value:e[r],enumerable:s?!0:n,configurable:!0,writable:!0});return o},h=e=>typeof e==\"object\"&&e!==null?u({from:e,seen:[],forceEnumerable:!0}):typeof e==\"function\"?`[Function: ${e.name||\"anonymous\"}]`:e,O=e=>{if(e instanceof Error)return e;if(typeof e==\"object\"&&e!==null&&!Array.isArray(e)){let t=new Error;return u({from:e,seen:[],to_:t}),t}return new i(e)};p.exports={serializeError:h,deserializeError:O}});var y=N(m());var d=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach(a=>a(...t))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter(a=>a!==t)}});function f(){let e=d();return[t=>e.on(\"callem\",t),t=>{e.emit(\"callem\",t)}]}var[v,B]=f();window.addEventListener(\"error\",e=>{let t={type:\"error\",message:e.message,url:e.filename,lineNumber:e.lineno,colNumber:e.colno,error:JSON.parse(y.serializeError(e.error))};window.ReactNativeWebView.postMessage(JSON.stringify(t))});window.addEventListener(\"unhandledrejection\",e=>{let t={type:\"error\",message:e.reason};window.ReactNativeWebView.postMessage(JSON.stringify(t))});var b=e=>{let t=JSON.stringify(e);return window.ReactNativeWebView.postMessage(t),t};window.send=e=>b(e);window.ready=()=>{let e={type:\"ready\"};return window.send(e)};window.log=(...e)=>b({type:\"log\",data:e});window.emitMessage=B;window.onMessage=v;window.ReactNativeWebView.postMessage(\"ready\");})();\n//# sourceMappingURL=data:application/json;base64,\n";

