export default '(()=>{var Z=Object.create,D=Object.defineProperty,j=Object.getPrototypeOf,ee=Object.prototype.hasOwnProperty,te=Object.getOwnPropertyNames,se=Object.getOwnPropertyDescriptor;var re=e=>D(e,"__esModule",{value:!0});var oe=(e,t)=>()=>(t||(t={exports:{}},e(t.exports,t)),t.exports);var ne=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of te(t))!ee.call(e,o)&&o!=="default"&&D(e,o,{get:()=>t[o],enumerable:!(r=se(t,o))||r.enumerable});return e},ae=e=>e&&e.__esModule?e:ne(re(D(e!=null?Z(j(e)):{},"default",{value:e,enumerable:!0})),e);var H=oe((ce,R)=>{var l=null;typeof WebSocket!="undefined"?l=WebSocket:typeof MozWebSocket!="undefined"?l=MozWebSocket:typeof global!="undefined"?l=global.WebSocket||global.MozWebSocket:typeof window!="undefined"?l=window.WebSocket||window.MozWebSocket:typeof self!="undefined"&&(l=self.WebSocket||self.MozWebSocket);R.exports=l});var $=ae(H());var L=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach(r=>r(...t))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter(r=>r!==t)}});function u(){let e=L();return[t=>e.on("callem",t),t=>{e.emit("callem",t)}]}var A=e=>{let t=0;return{pack:(g,b,i=0)=>{let y={id:t++,refId:i,type:g,message:b};return[JSON.stringify(y),y]},unpack:g=>(()=>{try{let i=JSON.parse(g);if(!("id"in i))throw new Error(`Invalid parsed packet format ${JSON.stringify(i)} (${g})`);return i}catch(i){throw new Error(`Parse failed for ${g}, ${i}`)}})()}};var U=()=>A();var m;(function(e){e[e.Login=1]="Login",e[e.Session=2]="Session",e[e.NearbyEntities=3]="NearbyEntities",e[e.PositionUpdate=4]="PositionUpdate"})(m||(m={}));var M=U();var q=e=>{let t=0,r=!1,o={idToken:"",host:"192.168.1.2",port:3e3,maxRetries:0,retryDelayMs:5e3,awaitReplyTimeoutMs:1e3,...e,logger:{info:console.log,warn:console.warn,error:console.error,debug:console.log,...e?.logger}},{idToken:g,host:b,port:i,maxRetries:y,retryDelayMs:k,awaitReplyTimeoutMs:z,logger:n}=o,[E,_]=u(),[I,O]=u(),[J,F]=u(),d,S=()=>{T=void 0;let s=$.default||$;console.log({Ws:s}),d=new s(`ws://${b}:${i}`),d.onmessage=p=>{let{data:c}=p;if(typeof c!="string")throw new Error(`Unsupported data type ${c}`);let C=M.unpack(c);_(C)},d.onopen=()=>{t=0,n.debug("connected"),n.debug("listening for data"),g&&P({idToken:g}).then(()=>{r=!0,O({attempt:t})}).catch(p=>{n.error("Error logging in",p),a(),x()})},d.onclose=()=>{n.debug("close"),a(),x()},d.onerror=p=>{n.error(p),a(),x()};let a=()=>{n.debug("Cleaning up"),d.close(),r=!1,F({attempt:t})}},T,x=()=>{if(!T){if(n.debug("scheduling reconnect"),y&&t>=y){n.debug("Max retries exceeded");return}t++,T=setTimeout(()=>{n.debug("attempting reconnect now"),S()},k)}};S();let G=async(s,a)=>{let[p,c]=M.pack(s,a);return n.debug({certified:c}),new Promise((C,W)=>{let v=setTimeout(()=>{w(),W(`Timed out awaiting reply to ${c.id}`)},z),w=E(h=>{h.refId===c.id&&(w(),clearTimeout(v),C(h))});N(p).catch(h=>{w(),clearTimeout(v),W("Error sending. Trigger reconnect")})})},K=(s,a)=>{let[p]=M.pack(s,a);N(p).catch(c=>{n.error("Error sending message",c)})},P=s=>G(m.Login,s),Q=async s=>{K(m.PositionUpdate,s)},N=async s=>d.send(s),[V,X]=u(),Y={[m.NearbyEntities]:X};return E(s=>{let a=Y[s.type];!a||a(s.message)}),{close:()=>d.close(),login:P,updatePosition:Q,onConnect:I,onDisconnect:J,isConnected:()=>r,onNearbyEntities:V}};var{log:f}=window,B=()=>{window.send({type:"heartbeat"}),setTimeout(B,500)};B();window.onMessage(e=>{let t=e,o={}[t.type];if(!o)throw new Error(`Message type ${t.type} is not implemented`);o(t),f("Rx main->worker",{_msg:t})});var ze=q({logger:{info:f,debug:f,error:f,warn:f}});window.ready();})();\n//# sourceMappingURL=data:application/json;base64,\n'
