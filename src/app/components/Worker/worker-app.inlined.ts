
export default "(()=>{var Z=Object.create,D=Object.defineProperty,j=Object.getPrototypeOf,ee=Object.prototype.hasOwnProperty,te=Object.getOwnPropertyNames,se=Object.getOwnPropertyDescriptor;var re=e=>D(e,\"__esModule\",{value:!0});var oe=(e,t)=>()=>(t||(t={exports:{}},e(t.exports,t)),t.exports);var ne=(e,t,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of te(t))!ee.call(e,o)&&o!==\"default\"&&D(e,o,{get:()=>t[o],enumerable:!(r=se(t,o))||r.enumerable});return e},ae=e=>e&&e.__esModule?e:ne(re(D(e!=null?Z(j(e)):{},\"default\",{value:e,enumerable:!0})),e);var H=oe((ce,R)=>{var l=null;typeof WebSocket!=\"undefined\"?l=WebSocket:typeof MozWebSocket!=\"undefined\"?l=MozWebSocket:typeof global!=\"undefined\"?l=global.WebSocket||global.MozWebSocket:typeof window!=\"undefined\"?l=window.WebSocket||window.MozWebSocket:typeof self!=\"undefined\"&&(l=self.WebSocket||self.MozWebSocket);R.exports=l});var $=ae(H());var L=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach(r=>r(...t))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter(r=>r!==t)}});function u(){let e=L();return[t=>e.on(\"callem\",t),t=>{e.emit(\"callem\",t)}]}var A=e=>{let t=0;return{pack:(g,b,i=0)=>{let y={id:t++,refId:i,type:g,message:b};return[JSON.stringify(y),y]},unpack:g=>(()=>{try{let i=JSON.parse(g);if(!(\"id\"in i))throw new Error(`Invalid parsed packet format ${JSON.stringify(i)} (${g})`);return i}catch(i){throw new Error(`Parse failed for ${g}, ${i}`)}})()}};var U=()=>A();var m;(function(e){e[e.Login=1]=\"Login\",e[e.Session=2]=\"Session\",e[e.NearbyEntities=3]=\"NearbyEntities\",e[e.PositionUpdate=4]=\"PositionUpdate\"})(m||(m={}));var M=U();var q=e=>{let t=0,r=!1,o={idToken:\"\",host:\"192.168.1.2\",port:3e3,maxRetries:0,retryDelayMs:5e3,awaitReplyTimeoutMs:1e3,...e,logger:{info:console.log,warn:console.warn,error:console.error,debug:console.log,...e?.logger}},{idToken:g,host:b,port:i,maxRetries:y,retryDelayMs:k,awaitReplyTimeoutMs:z,logger:n}=o,[E,_]=u(),[I,O]=u(),[J,F]=u(),d,S=()=>{T=void 0;let s=$.default||$;console.log({Ws:s}),d=new s(`ws://${b}:${i}`),d.onmessage=p=>{let{data:c}=p;if(typeof c!=\"string\")throw new Error(`Unsupported data type ${c}`);let C=M.unpack(c);_(C)},d.onopen=()=>{t=0,n.debug(\"connected\"),n.debug(\"listening for data\"),g&&P({idToken:g}).then(()=>{r=!0,O({attempt:t})}).catch(p=>{n.error(\"Error logging in\",p),a(),x()})},d.onclose=()=>{n.debug(\"close\"),a(),x()},d.onerror=p=>{n.error(p),a(),x()};let a=()=>{n.debug(\"Cleaning up\"),d.close(),r=!1,F({attempt:t})}},T,x=()=>{if(!T){if(n.debug(\"scheduling reconnect\"),y&&t>=y){n.debug(\"Max retries exceeded\");return}t++,T=setTimeout(()=>{n.debug(\"attempting reconnect now\"),S()},k)}};S();let G=async(s,a)=>{let[p,c]=M.pack(s,a);return n.debug({certified:c}),new Promise((C,W)=>{let v=setTimeout(()=>{w(),W(`Timed out awaiting reply to ${c.id}`)},z),w=E(h=>{h.refId===c.id&&(w(),clearTimeout(v),C(h))});N(p).catch(h=>{w(),clearTimeout(v),W(\"Error sending. Trigger reconnect\")})})},K=(s,a)=>{let[p]=M.pack(s,a);N(p).catch(c=>{n.error(\"Error sending message\",c)})},P=s=>G(m.Login,s),Q=async s=>{K(m.PositionUpdate,s)},N=async s=>d.send(s),[V,X]=u(),Y={[m.NearbyEntities]:X};return E(s=>{let a=Y[s.type];!a||a(s.message)}),{close:()=>d.close(),login:P,updatePosition:Q,onConnect:I,onDisconnect:J,isConnected:()=>r,onNearbyEntities:V}};var{log:f}=window,B=()=>{window.send({type:\"heartbeat\"}),setTimeout(B,500)};B();window.onMessage(e=>{let t=e,o={}[t.type];if(!o)throw new Error(`Message type ${t.type} is not implemented`);o(t),f(\"Rx main->worker\",{_msg:t})});var ze=q({logger:{info:f,debug:f,error:f,warn:f}});window.ready();})();\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtd3MvYnJvd3Nlci5qcyIsICJzcmMvY2xpZW50L2NyZWF0ZUNsaWVudE5ldGNvZGUudHMiLCAibm9kZV9tb2R1bGVzL25hbm9ldmVudHMvaW5kZXguanMiLCAic3JjL2NhbGxlbS9pbmRleC50cyIsICJzcmMvbjUzL3RyYW5zcG9ydC50cyIsICJzcmMvbjUzL2luZGV4LnRzIiwgInNyYy9jb21tb24vaW5kZXgudHMiLCAic3JjL2FwcC9jb21wb25lbnRzL1dvcmtlci93b3JrZXItYXBwLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBodHRwczovL2dpdGh1Yi5jb20vbWF4b2dkZW4vd2Vic29ja2V0LXN0cmVhbS9ibG9iLzQ4ZGMzZGRmOTQzZTVhZGE2NjhjMzFjY2Q5NGU5MTg2ZjAyZmFmYmQvd3MtZmFsbGJhY2suanNcblxudmFyIHdzID0gbnVsbFxuXG5pZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIE1veldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBNb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSB3aW5kb3cuV2ViU29ja2V0IHx8IHdpbmRvdy5Nb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdzID0gc2VsZi5XZWJTb2NrZXQgfHwgc2VsZi5Nb3pXZWJTb2NrZXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3c1xuIiwgImltcG9ydCAqIGFzIFdlYlNvY2tldCBmcm9tICdpc29tb3JwaGljLXdzJ1xuaW1wb3J0IHsgY2FsbGVtLCBDYWxsZW1FbWl0dGVyLCBDYWxsZW1TdWJzY3JpYmVyIH0gZnJvbSAnLi4vY2FsbGVtJ1xuaW1wb3J0IHtcbiAgQW55TWVzc2FnZSxcbiAgTG9naW5SZXF1ZXN0LFxuICBNZXNzYWdlVHlwZXMsXG4gIE5lYXJieUVudGl0aWVzLFxuICBuZXRjb2RlLFxuICBQb3NpdGlvblVwZGF0ZSxcbn0gZnJvbSAnLi4vY29tbW9uJ1xuaW1wb3J0IHsgTWVzc2FnZVdyYXBwZXIgfSBmcm9tICcuLi9uNTMnXG5cbmV4cG9ydCB0eXBlIENsaWVudE1lc3NhZ2VTZW5kZXIgPSAobXNnOiBCdWZmZXIpID0+IFByb21pc2U8dm9pZD5cblxuZXhwb3J0IGludGVyZmFjZSBMb2dnZXIge1xuICBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZFxuICB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZFxuICBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWRcbiAgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkXG59XG5cbmV4cG9ydCB0eXBlIENsaWVudE5ldGNvZGVDb25maWcgPSB7XG4gIGlkVG9rZW46IHN0cmluZ1xuICBob3N0OiBzdHJpbmdcbiAgcG9ydDogbnVtYmVyXG4gIG1heFJldHJpZXM6IG51bWJlclxuICByZXRyeURlbGF5TXM6IG51bWJlclxuICBhd2FpdFJlcGx5VGltZW91dE1zOiBudW1iZXJcbiAgbG9nZ2VyOiBMb2dnZXJcbn1cblxuZXhwb3J0IHR5cGUgQ29ubmVjdEV2ZW50ID0geyBhdHRlbXB0OiBudW1iZXIgfVxuZXhwb3J0IHR5cGUgRGlzY29ubmVjdEV2ZW50ID0geyBhdHRlbXB0OiBudW1iZXIgfVxuXG5leHBvcnQgdHlwZSBTb2NrZXRDb25uZWN0aW9uID0ge1xuICBvbk9wZW46IENhbGxlbVN1YnNjcmliZXJcbiAgb25EYXRhOiBDYWxsZW1TdWJzY3JpYmVyPHsgYnVmZmVyOiBCdWZmZXIgfT5cbiAgb25FcnJvcjogQ2FsbGVtU3Vic2NyaWJlcjx7IGVycm9yOiBFcnJvciB9PlxuICBvbkNsb3NlOiBDYWxsZW1TdWJzY3JpYmVyXG4gIGRlc3Ryb3k6ICgpID0+IHZvaWRcbiAgd3JpdGU6IChidWZmZXI6IEJ1ZmZlcikgPT4gUHJvbWlzZTx2b2lkPlxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlQ2xpZW50TmV0Y29kZSA9IChcbiAgc2V0dGluZ3M/OiBQYXJ0aWFsPENsaWVudE5ldGNvZGVDb25maWc+XG4pID0+IHtcbiAgbGV0IHJldHJ5Q291bnQgPSAwXG4gIGxldCBpc0Nvbm5lY3RlZCA9IGZhbHNlXG5cbiAgY29uc3QgX3NldHRpbmdzOiBDbGllbnROZXRjb2RlQ29uZmlnID0ge1xuICAgIGlkVG9rZW46ICcnLFxuICAgIGhvc3Q6ICcxOTIuMTY4LjEuMicsXG4gICAgcG9ydDogMzAwMCxcbiAgICBtYXhSZXRyaWVzOiAwLFxuICAgIHJldHJ5RGVsYXlNczogNTAwMCxcbiAgICBhd2FpdFJlcGx5VGltZW91dE1zOiAxMDAwLFxuICAgIC4uLnNldHRpbmdzLFxuICAgIGxvZ2dlcjoge1xuICAgICAgaW5mbzogY29uc29sZS5sb2csXG4gICAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4gICAgICBlcnJvcjogY29uc29sZS5lcnJvcixcbiAgICAgIGRlYnVnOiBjb25zb2xlLmxvZyxcbiAgICAgIC4uLnNldHRpbmdzPy5sb2dnZXIsXG4gICAgfSxcbiAgfVxuICBjb25zdCB7XG4gICAgaWRUb2tlbixcbiAgICBob3N0LFxuICAgIHBvcnQsXG4gICAgbWF4UmV0cmllcyxcbiAgICByZXRyeURlbGF5TXMsXG4gICAgYXdhaXRSZXBseVRpbWVvdXRNcyxcbiAgICBsb2dnZXIsXG4gIH0gPSBfc2V0dGluZ3NcblxuICBjb25zdCBbb25NZXNzYWdlLCBlbWl0TWVzc2FnZV0gPSBjYWxsZW08TWVzc2FnZVdyYXBwZXI+KClcbiAgY29uc3QgW29uQ29ubmVjdCwgZW1pdENvbm5lY3RdID0gY2FsbGVtPENvbm5lY3RFdmVudD4oKVxuICBjb25zdCBbb25EaXNjb25uZWN0LCBlbWl0RGlzY29ubmVjdF0gPSBjYWxsZW08RGlzY29ubmVjdEV2ZW50PigpXG5cbiAgbGV0IGNvbm46IFdlYlNvY2tldFxuICBjb25zdCBjb25uZWN0ID0gKCkgPT4ge1xuICAgIHJldHJ5VGlkID0gdW5kZWZpbmVkXG4gICAgLy9AdHMtaWdub3JlXG4gICAgY29uc3QgV3MgPSBXZWJTb2NrZXQuZGVmYXVsdCB8fCBXZWJTb2NrZXRcbiAgICBjb25zb2xlLmxvZyh7IFdzIH0pXG4gICAgLy9AdHMtaWdub3JlXG4gICAgY29ubiA9IG5ldyBXcyhgd3M6Ly8ke2hvc3R9OiR7cG9ydH1gKVxuICAgIGNvbm4ub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gZVxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRhdGEgdHlwZSAke2RhdGF9YClcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1zZyA9IG5ldGNvZGUudW5wYWNrKGRhdGEpXG4gICAgICBlbWl0TWVzc2FnZShtc2cpXG4gICAgfVxuXG4gICAgY29ubi5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICByZXRyeUNvdW50ID0gMFxuICAgICAgbG9nZ2VyLmRlYnVnKCdjb25uZWN0ZWQnKVxuICAgICAgbG9nZ2VyLmRlYnVnKCdsaXN0ZW5pbmcgZm9yIGRhdGEnKVxuXG4gICAgICBpZiAoaWRUb2tlbikge1xuICAgICAgICBsb2dpbih7IGlkVG9rZW4gfSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpc0Nvbm5lY3RlZCA9IHRydWVcbiAgICAgICAgICAgIGVtaXRDb25uZWN0KHtcbiAgICAgICAgICAgICAgYXR0ZW1wdDogcmV0cnlDb3VudCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgRXJyb3IgbG9nZ2luZyBpbmAsIGUpXG4gICAgICAgICAgICBjbGVhbnVwKClcbiAgICAgICAgICAgIHJlY29ubmVjdCgpXG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25uLm9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICBsb2dnZXIuZGVidWcoJ2Nsb3NlJylcbiAgICAgIGNsZWFudXAoKVxuICAgICAgcmVjb25uZWN0KClcbiAgICB9XG5cbiAgICBjb25uLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgbG9nZ2VyLmVycm9yKGUpXG4gICAgICBjbGVhbnVwKClcbiAgICAgIHJlY29ubmVjdCgpXG4gICAgfVxuXG4gICAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQ2xlYW5pbmcgdXAnKVxuICAgICAgY29ubi5jbG9zZSgpXG4gICAgICBpc0Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICBlbWl0RGlzY29ubmVjdCh7XG4gICAgICAgIGF0dGVtcHQ6IHJldHJ5Q291bnQsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGxldCByZXRyeVRpZDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCB1bmRlZmluZWRcblxuICBjb25zdCByZWNvbm5lY3QgPSAoKSA9PiB7XG4gICAgaWYgKHJldHJ5VGlkKSByZXR1cm5cbiAgICBsb2dnZXIuZGVidWcoJ3NjaGVkdWxpbmcgcmVjb25uZWN0JylcbiAgICBpZiAobWF4UmV0cmllcyAmJiByZXRyeUNvdW50ID49IG1heFJldHJpZXMpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgTWF4IHJldHJpZXMgZXhjZWVkZWRgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHJ5Q291bnQrK1xuICAgIHJldHJ5VGlkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsb2dnZXIuZGVidWcoJ2F0dGVtcHRpbmcgcmVjb25uZWN0IG5vdycpXG4gICAgICBjb25uZWN0KClcbiAgICB9LCByZXRyeURlbGF5TXMpXG4gIH1cblxuICBjb25uZWN0KClcblxuICBjb25zdCBzZW5kTWVzc2FnZUFuZEF3YWl0UmVwbHkgPSBhc3luYyA8XG4gICAgVE1lc3NhZ2UgZXh0ZW5kcyBBbnlNZXNzYWdlLFxuICAgIFRSZXBseSBleHRlbmRzIEFueU1lc3NhZ2VcbiAgPihcbiAgICB0eXBlOiBNZXNzYWdlVHlwZXMsXG4gICAgbXNnOiBUTWVzc2FnZVxuICApOiBQcm9taXNlPFRSZXBseT4gPT4ge1xuICAgIGNvbnN0IFtwYWNrZWQsIGNlcnRpZmllZF0gPSBuZXRjb2RlLnBhY2sodHlwZSwgbXNnKVxuICAgIGxvZ2dlci5kZWJ1Zyh7IGNlcnRpZmllZCB9KVxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUUmVwbHk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHRpZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB1bnN1YigpXG4gICAgICAgIHJlamVjdChgVGltZWQgb3V0IGF3YWl0aW5nIHJlcGx5IHRvICR7Y2VydGlmaWVkLmlkfWApXG4gICAgICB9LCBhd2FpdFJlcGx5VGltZW91dE1zKVxuICAgICAgY29uc3QgdW5zdWIgPSBvbk1lc3NhZ2UoKG0pID0+IHtcbiAgICAgICAgaWYgKG0ucmVmSWQgIT09IGNlcnRpZmllZC5pZCkgcmV0dXJuIC8vIFNraXAsIGl0J3Mgbm90IG91ciBtZXNzYWdlXG4gICAgICAgIHVuc3ViKClcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpZClcbiAgICAgICAgcmVzb2x2ZSgobSBhcyB1bmtub3duKSBhcyBUUmVwbHkpXG4gICAgICB9KVxuICAgICAgc2VuZChwYWNrZWQpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHVuc3ViKClcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpZClcbiAgICAgICAgcmVqZWN0KGBFcnJvciBzZW5kaW5nLiBUcmlnZ2VyIHJlY29ubmVjdGApXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBjb25zdCBzZW5kTWVzc2FnZSA9IDxUTWVzc2FnZSBleHRlbmRzIEFueU1lc3NhZ2U+KFxuICAgIHR5cGU6IE1lc3NhZ2VUeXBlcyxcbiAgICBtc2c6IFRNZXNzYWdlXG4gICk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IFtwYWNrZWRdID0gbmV0Y29kZS5wYWNrKHR5cGUsIG1zZylcbiAgICBzZW5kKHBhY2tlZCkuY2F0Y2goKGUpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcihgRXJyb3Igc2VuZGluZyBtZXNzYWdlYCwgZSlcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgbG9naW4gPSAobWVzc2FnZTogTG9naW5SZXF1ZXN0KSA9PlxuICAgIHNlbmRNZXNzYWdlQW5kQXdhaXRSZXBseShNZXNzYWdlVHlwZXMuTG9naW4sIG1lc3NhZ2UpXG5cbiAgY29uc3QgdXBkYXRlUG9zaXRpb24gPSBhc3luYyAobWVzc2FnZTogUG9zaXRpb25VcGRhdGUpID0+IHtcbiAgICBzZW5kTWVzc2FnZShNZXNzYWdlVHlwZXMuUG9zaXRpb25VcGRhdGUsIG1lc3NhZ2UpXG4gIH1cblxuICBjb25zdCBzZW5kID0gYXN5bmMgKGRhdGE6IHN0cmluZykgPT4gY29ubi5zZW5kKGRhdGEpXG5cbiAgLy8gTGlzdGVuIGZvciBpbXBvcnRhbnQgbWVzc2FnZXNcbiAgY29uc3QgW29uTmVhcmJ5RW50aXRpZXMsIGVtaXROZWFyYnlFbnRpdGllc10gPSBjYWxsZW08TmVhcmJ5RW50aXRpZXM+KClcbiAgY29uc3QgZGlzcGF0Y2hIYW5kbGVyczogeyBbXyBpbiBNZXNzYWdlVHlwZXNdPzogQ2FsbGVtRW1pdHRlcjxhbnk+IH0gPSB7XG4gICAgW01lc3NhZ2VUeXBlcy5OZWFyYnlFbnRpdGllc106IGVtaXROZWFyYnlFbnRpdGllcyxcbiAgfVxuICBvbk1lc3NhZ2UoKG0pID0+IHtcbiAgICAvLyBsb2dnZXIubG9nKGBnb3QgcmF3IG1lc3NhZ2UgaW5jb21pbmdgLCBtKVxuICAgIGNvbnN0IGRpc3BhdGNoSGFuZGxlciA9IGRpc3BhdGNoSGFuZGxlcnNbbS50eXBlIGFzIE1lc3NhZ2VUeXBlc11cbiAgICBpZiAoIWRpc3BhdGNoSGFuZGxlcikgcmV0dXJuIC8vIE5vdCBoYW5kbGVkXG4gICAgZGlzcGF0Y2hIYW5kbGVyKG0ubWVzc2FnZSlcbiAgfSlcblxuICBjb25zdCBhcGkgPSB7XG4gICAgY2xvc2U6ICgpID0+IGNvbm4uY2xvc2UoKSxcbiAgICBsb2dpbixcbiAgICB1cGRhdGVQb3NpdGlvbixcbiAgICBvbkNvbm5lY3QsXG4gICAgb25EaXNjb25uZWN0LFxuICAgIGlzQ29ubmVjdGVkOiAoKSA9PiBpc0Nvbm5lY3RlZCxcbiAgICBvbk5lYXJieUVudGl0aWVzLFxuICB9XG4gIHJldHVybiBhcGlcbn1cblxuZXhwb3J0IHR5cGUgQ2xpZW50TmV0Y29kZSA9IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUNsaWVudE5ldGNvZGU+XG4iLCAibGV0IGNyZWF0ZU5hbm9FdmVudHMgPSAoKSA9PiAoe1xuICBldmVudHM6IHt9LFxuICBlbWl0IChldmVudCwgLi4uYXJncykge1xuICAgIDsodGhpcy5ldmVudHNbZXZlbnRdIHx8IFtdKS5mb3JFYWNoKGkgPT4gaSguLi5hcmdzKSlcbiAgfSxcbiAgb24gKGV2ZW50LCBjYikge1xuICAgIDsodGhpcy5ldmVudHNbZXZlbnRdID0gdGhpcy5ldmVudHNbZXZlbnRdIHx8IFtdKS5wdXNoKGNiKVxuICAgIHJldHVybiAoKSA9PlxuICAgICAgKHRoaXMuZXZlbnRzW2V2ZW50XSA9ICh0aGlzLmV2ZW50c1tldmVudF0gfHwgW10pLmZpbHRlcihpID0+IGkgIT09IGNiKSlcbiAgfVxufSlcblxuZXhwb3J0IHsgY3JlYXRlTmFub0V2ZW50cyB9XG4iLCAiaW1wb3J0IHsgY3JlYXRlTmFub0V2ZW50cyB9IGZyb20gJ25hbm9ldmVudHMnXG5cbmV4cG9ydCB0eXBlIERhdGFQcmltaXRpdmVzID0gYW55XG5leHBvcnQgdHlwZSBDYWxsZW1EYXRhID0geyBbXzogc3RyaW5nXTogRGF0YVByaW1pdGl2ZXMgfVxuZXhwb3J0IHR5cGUgVW5zdWJzY3JpYmUgPSAoKSA9PiB2b2lkXG5leHBvcnQgdHlwZSBDYWxsZW1IYW5kbGVyPFREYXRhIGV4dGVuZHMgQ2FsbGVtRGF0YSA9IHt9PiA9IChkYXRhOiBURGF0YSkgPT4gdm9pZFxuZXhwb3J0IHR5cGUgQ2FsbGVtU3Vic2NyaWJlcjxURGF0YSBleHRlbmRzIENhbGxlbURhdGEgPSB7fT4gPSAoXG4gIGNiOiBDYWxsZW1IYW5kbGVyPFREYXRhPlxuKSA9PiBVbnN1YnNjcmliZVxuZXhwb3J0IHR5cGUgQ2FsbGVtRW1pdHRlcjxURGF0YSBleHRlbmRzIENhbGxlbURhdGEgPSB7fT4gPSAoZGF0YTogVERhdGEpID0+IHZvaWRcblxuZXhwb3J0IHR5cGUgQ2FsbGVtUGFpcjxURGF0YSBleHRlbmRzIENhbGxlbURhdGEgPSB7fT4gPSBbXG4gIENhbGxlbVN1YnNjcmliZXI8VERhdGE+LFxuICBDYWxsZW1FbWl0dGVyPFREYXRhPlxuXVxuXG4vKlxuVXNhZ2UgZXhhbXBsZTpcblxuY29uc3QgW29uLCBlbWl0XSA9IGNhbGxlbTxzdHJpbmc+KClcblxuY29uc3QgdW5zdWIgPSBvbiggcz0+e1xuICBjb25zb2xlLmxvZygnZ290IHN0cmluZycsIHMpXG59KVxuZW1pdCgnaGVsbG8nKVxudW5zdWIoKSAvLyBVbnN1YnNjcmliZSwgc3RvcCBsaXN0ZW5pbmdcblxuKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxsZW08VERhdGEgZXh0ZW5kcyBDYWxsZW1EYXRhID0ge30+KCk6IENhbGxlbVBhaXI8VERhdGE+IHtcbiAgY29uc3QgZW1pdHRlciA9IGNyZWF0ZU5hbm9FdmVudHMoKVxuICByZXR1cm4gW1xuICAgIChjYWxsYmFjazogQ2FsbGVtSGFuZGxlcjxURGF0YT4pOiBVbnN1YnNjcmliZSA9PiB7XG4gICAgICBjb25zdCB1bnN1YiA9IGVtaXR0ZXIub24oJ2NhbGxlbScsIGNhbGxiYWNrKVxuICAgICAgcmV0dXJuIHVuc3ViXG4gICAgfSxcbiAgICAoZGF0YTogVERhdGEpID0+IHtcbiAgICAgIGVtaXR0ZXIuZW1pdCgnY2FsbGVtJywgZGF0YSlcbiAgICB9LFxuICBdXG59XG4iLCAiaW1wb3J0IHsgQW55TWVzc2FnZSwgTWVzc2FnZVR5cGVzIH0gZnJvbSAnLi4vY29tbW9uJ1xuXG5leHBvcnQgdHlwZSBUcmFuc3BvcnRQYWNrZXJDb25maWcgPSB7fVxuXG5leHBvcnQgdHlwZSBNZXNzYWdlSGVhZGVyID0ge1xuICBpZDogbnVtYmVyXG4gIHJlZklkOiBudW1iZXJcbiAgdHlwZTogTWVzc2FnZVR5cGVzXG59XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VXcmFwcGVyPFxuICBUTWVzc2FnZSBleHRlbmRzIEFueU1lc3NhZ2UgPSBBbnlNZXNzYWdlXG4+ID0gTWVzc2FnZUhlYWRlciAmIHtcbiAgbWVzc2FnZTogVE1lc3NhZ2Vcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRyYW5zcG9ydFBhY2tlciA9IChcbiAgY29uZmlnPzogUGFydGlhbDxUcmFuc3BvcnRQYWNrZXJDb25maWc+XG4pID0+IHtcbiAgbGV0IG1lc3NhZ2VJZCA9IDBcblxuICBjb25zdCBwYWNrID0gPFRNZXNzYWdlIGV4dGVuZHMgQW55TWVzc2FnZT4oXG4gICAgdHlwZTogTWVzc2FnZVR5cGVzLFxuICAgIG1lc3NhZ2U6IFRNZXNzYWdlLFxuICAgIHJlZklkID0gMFxuICApOiBbc3RyaW5nLCBNZXNzYWdlV3JhcHBlcjxUTWVzc2FnZT5dID0+IHtcbiAgICB0eXBlIFRoaXNNZXNzYWdlV3JhcHBlciA9IE1lc3NhZ2VXcmFwcGVyPFRNZXNzYWdlPlxuXG4gICAgY29uc3Qgd3JhcHBlcjogVGhpc01lc3NhZ2VXcmFwcGVyID0ge1xuICAgICAgaWQ6IG1lc3NhZ2VJZCsrLFxuICAgICAgcmVmSWQsXG4gICAgICB0eXBlOiB0eXBlIGFzIG51bWJlcixcbiAgICAgIG1lc3NhZ2UsXG4gICAgfVxuXG4gICAgY29uc3QgcGFja2VkID0gSlNPTi5zdHJpbmdpZnkod3JhcHBlcilcbiAgICByZXR1cm4gW3BhY2tlZCwgd3JhcHBlcl1cbiAgfVxuXG4gIGNvbnN0IHVucGFjayA9IDxUTWVzc2FnZSBleHRlbmRzIEFueU1lc3NhZ2U+KHBhY2tlZDogc3RyaW5nKSA9PiB7XG4gICAgdHlwZSBUaGlzTWVzc2FnZVdyYXBwZXIgPSBNZXNzYWdlV3JhcHBlcjxUTWVzc2FnZT5cbiAgICBjb25zdCB3cmFwcGVyID0gKCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHBhY2tlZClcbiAgICAgICAgaWYgKCEoJ2lkJyBpbiBkYXRhKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBJbnZhbGlkIHBhcnNlZCBwYWNrZXQgZm9ybWF0ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9ICgke3BhY2tlZH0pYFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YSBhcyBUaGlzTWVzc2FnZVdyYXBwZXJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXJzZSBmYWlsZWQgZm9yICR7cGFja2VkfSwgJHtlfWApXG4gICAgICB9XG4gICAgfSkoKVxuXG4gICAgcmV0dXJuIHdyYXBwZXJcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFjayxcbiAgICB1bnBhY2ssXG4gIH1cbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVUcmFuc3BvcnRQYWNrZXIgfSBmcm9tICcuL3RyYW5zcG9ydCdcblxuZXhwb3J0IHsgTWVzc2FnZVdyYXBwZXIgfSBmcm9tICcuL3RyYW5zcG9ydCdcbmV4cG9ydCBjb25zdCBjcmVhdGVOZXRjb2RlID0gKCkgPT4ge1xuICBjb25zdCB0cmFuc3BvcnQgPSBjcmVhdGVUcmFuc3BvcnRQYWNrZXIoKVxuXG4gIHJldHVybiB0cmFuc3BvcnRcbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVOZXRjb2RlIH0gZnJvbSAnLi4vbjUzJ1xuaW1wb3J0IHsgTG9naW5SZXF1ZXN0IH0gZnJvbSAnLi9Mb2dpblJlcXVlc3QnXG5pbXBvcnQgeyBOZWFyYnlFbnRpdGllcyB9IGZyb20gJy4vTmVhcmJ5RW50aXRpZXMnXG5pbXBvcnQgeyBQb3NpdGlvblVwZGF0ZSB9IGZyb20gJy4vUG9zaXRpb25VcGRhdGUnXG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSAnLi9TZXNzaW9uJ1xuXG5leHBvcnQgdHlwZSBBbnlNZXNzYWdlID1cbiAgfCBMb2dpblJlcXVlc3RcbiAgfCBTZXNzaW9uXG4gIHwgUG9zaXRpb25VcGRhdGVcbiAgfCBOZWFyYnlFbnRpdGllc1xuXG5leHBvcnQgeyBOZWFyYnlFbnRpdGllcywgTG9naW5SZXF1ZXN0LCBQb3NpdGlvblVwZGF0ZSwgU2Vzc2lvbiB9XG5cbmV4cG9ydCBlbnVtIE1lc3NhZ2VUeXBlcyB7XG4gIExvZ2luID0gMSxcbiAgU2Vzc2lvbiA9IDIsXG4gIE5lYXJieUVudGl0aWVzID0gMyxcbiAgUG9zaXRpb25VcGRhdGUgPSA0LFxufVxuZXhwb3J0IGNvbnN0IG5ldGNvZGUgPSBjcmVhdGVOZXRjb2RlKClcbiIsICIvLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vcm4td2Vid29ya2VyL2luZGV4LmQudHNcIi8+XG5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudE5ldGNvZGUgfSBmcm9tICcuLi8uLi8uLi9jbGllbnQnXG5pbXBvcnQge1xuICBFcnJvck1lc3NhZ2UsXG4gIExvZ01lc3NhZ2UsXG4gIE1lc3NhZ2VCYXNlLFxuICBQaW5nTWVzc2FnZSxcbiAgUG9uZ01lc3NhZ2UsXG4gIFJlYWR5TWVzc2FnZSxcbiAgV29ya2VyTWVzc2FnZVR5cGVzLFxufSBmcm9tICcuLi8uLi8uLi9ybi13ZWJ3b3JrZXInXG5cbmNvbnN0IHsgbG9nIH0gPSB3aW5kb3dcblxuZXhwb3J0IGludGVyZmFjZSBMb2dpbk1lc3NhZ2UgZXh0ZW5kcyBNZXNzYWdlQmFzZTwnbG9naW4nPiB7XG4gIGlkVG9rZW46IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhlYXJ0YmVhdE1lc3NhZ2UgZXh0ZW5kcyBNZXNzYWdlQmFzZTwnaGVhcnRiZWF0Jz4ge31cblxuZXhwb3J0IHR5cGUgQW55TWVzc2FnZSA9IFdvcmtlck1lc3NhZ2VUeXBlcyB8IExvZ2luTWVzc2FnZSB8IEhlYXJ0YmVhdE1lc3NhZ2VcblxuY29uc3QgaGVhcnRiZWF0ID0gKCkgPT4ge1xuICB3aW5kb3cuc2VuZCh7IHR5cGU6ICdoZWFydGJlYXQnIH0pXG4gIHNldFRpbWVvdXQoaGVhcnRiZWF0LCA1MDApXG59XG5oZWFydGJlYXQoKVxuXG5leHBvcnQgdHlwZSBEaXNwYXRjaEhhbmRsZXI8VE1lc3NhZ2U+ID0gKG1zZzogVE1lc3NhZ2UpID0+IHZvaWRcbmV4cG9ydCB0eXBlIERpc3BhdGNoTG9va3VwID0ge1xuICBsb2c/OiBEaXNwYXRjaEhhbmRsZXI8TG9nTWVzc2FnZT5cbiAgbG9naW4/OiBEaXNwYXRjaEhhbmRsZXI8TG9naW5NZXNzYWdlPlxuICBoZWFydGJlYXQ/OiBEaXNwYXRjaEhhbmRsZXI8SGVhcnRiZWF0TWVzc2FnZT5cbiAgcGluZz86IERpc3BhdGNoSGFuZGxlcjxQaW5nTWVzc2FnZT5cbiAgcG9uZz86IERpc3BhdGNoSGFuZGxlcjxQb25nTWVzc2FnZT5cbiAgZXJyb3I/OiBEaXNwYXRjaEhhbmRsZXI8RXJyb3JNZXNzYWdlPlxuICByZWFkeT86IERpc3BhdGNoSGFuZGxlcjxSZWFkeU1lc3NhZ2U+XG59XG5cbndpbmRvdy5vbk1lc3NhZ2UoKG1zZykgPT4ge1xuICBjb25zdCBfbXNnID0gbXNnIGFzIEFueU1lc3NhZ2VcbiAgY29uc3QgZGlzcGF0Y2g6IERpc3BhdGNoTG9va3VwID0ge31cbiAgY29uc3QgX2QgPSBkaXNwYXRjaFtfbXNnLnR5cGUgYXMgQW55TWVzc2FnZVsndHlwZSddXSBhcyBEaXNwYXRjaEhhbmRsZXI8QW55TWVzc2FnZT5cbiAgaWYgKCFfZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWVzc2FnZSB0eXBlICR7X21zZy50eXBlfSBpcyBub3QgaW1wbGVtZW50ZWRgKVxuICB9XG4gIF9kKF9tc2cpXG4gIGxvZygnUnggbWFpbi0+d29ya2VyJywgeyBfbXNnIH0pXG59KVxuXG5jb25zdCBjbGllbnQgPSBjcmVhdGVDbGllbnROZXRjb2RlKHtcbiAgbG9nZ2VyOiB7XG4gICAgaW5mbzogbG9nLFxuICAgIGRlYnVnOiBsb2csXG4gICAgZXJyb3I6IGxvZyxcbiAgICB3YXJuOiBsb2csXG4gIH0sXG59KVxuXG4vLyB2YXIgZXhhbXBsZVNvY2tldCA9IG5ldyBXZWJTb2NrZXQoJ3dzOi8vbG9jYWxob3N0OjMwMDAnKVxuLy8gbG9nKCdnb3QgdGhhdCBzb2NrZXQnKVxuXG4vLyBleGFtcGxlU29ja2V0Lm9ub3BlbiA9IChldmVudCkgPT4ge1xuLy8gICBsb2coJ29ub3BlbicpXG4vLyAgIGV4YW1wbGVTb2NrZXQuc2VuZCgnaGVsbG8gd29ybGQnKVxuLy8gfVxuXG4vLyBleGFtcGxlU29ja2V0Lm9uZXJyb3IgPSAoZSkgPT4ge1xuLy8gICBsb2coJ29uZXJyb3InLCBlKVxuLy8gfVxuXG4vLyBleGFtcGxlU29ja2V0Lm9ubWVzc2FnZSA9IChtKSA9PiB7XG4vLyAgIGxvZygnb25tZXNzYWdlJywgbSlcbi8vIH1cblxuLy8gZXhhbXBsZVNvY2tldC5vbmNsb3NlID0gKCkgPT4ge1xuLy8gICBsb2coJ29uY2xvc2UnKVxuLy8gfVxuXG53aW5kb3cucmVhZHkoKVxuIl0sCiAgIm1hcHBpbmdzIjogInVpQkFBQSxrQkFFQSxHQUFJLEdBQUssS0FFVCxBQUFJLE1BQU8sWUFBYyxZQUN2QixFQUFLLFVBQ0EsQUFBSSxNQUFPLGVBQWlCLFlBQ2pDLEVBQUssYUFDQSxBQUFJLE1BQU8sU0FBVyxZQUMzQixFQUFLLE9BQU8sV0FBYSxPQUFPLGFBQzNCLEFBQUksTUFBTyxTQUFXLFlBQzNCLEVBQUssT0FBTyxXQUFhLE9BQU8sYUFDdkIsTUFBTyxPQUFTLGFBQ3pCLEdBQUssS0FBSyxXQUFhLEtBQUssY0FHOUIsRUFBTyxRQUFVLElDaEJqQixNQUEyQixRQ0EzQixHQUFJLEdBQW1CLElBQU8sRUFDNUIsT0FBUSxH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\n";

