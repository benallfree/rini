
export default "(()=>{var Z=Object.create,w=Object.defineProperty,ee=Object.getPrototypeOf,te=Object.prototype.hasOwnProperty,se=Object.getOwnPropertyNames,re=Object.getOwnPropertyDescriptor;var oe=e=>w(e,\"__esModule\",{value:!0});var ne=(e,t)=>()=>(t||(t={exports:{}},e(t.exports,t)),t.exports);var ae=(e,t,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of se(t))!te.call(e,o)&&o!==\"default\"&&w(e,o,{get:()=>t[o],enumerable:!(r=re(t,o))||r.enumerable});return e},ie=e=>e&&e.__esModule?e:ae(oe(w(e!=null?Z(ee(e)):{},\"default\",{value:e,enumerable:!0})),e);var R=ne((ge,L)=>{var d=null;typeof WebSocket!=\"undefined\"?d=WebSocket:typeof MozWebSocket!=\"undefined\"?d=MozWebSocket:typeof global!=\"undefined\"?d=global.WebSocket||global.MozWebSocket:typeof window!=\"undefined\"?d=window.WebSocket||window.MozWebSocket:typeof self!=\"undefined\"&&(d=self.WebSocket||self.MozWebSocket);L.exports=d});var $=ie(R());var H=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach(r=>r(...t))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter(r=>r!==t)}});function u(){let e=H();return[t=>e.on(\"callem\",t),t=>{e.emit(\"callem\",t)}]}var A=e=>{let t=0;return{pack:(g,M,i=0)=>{let y={id:t++,refId:i,type:g,message:M};return[JSON.stringify(y),y]},unpack:g=>(()=>{try{let i=JSON.parse(g);if(!(\"id\"in i))throw new Error(`Invalid parsed packet format ${JSON.stringify(i)} (${g})`);return i}catch(i){throw new Error(`Parse failed for ${g}, ${i}`)}})()}};var U=()=>A();var m;(function(e){e[e.Login=1]=\"Login\",e[e.Session=2]=\"Session\",e[e.NearbyEntities=3]=\"NearbyEntities\",e[e.PositionUpdate=4]=\"PositionUpdate\"})(m||(m={}));var f=U();var q=e=>{let t=0,r=!1,o={idToken:\"\",host:\"192.168.1.2\",port:3e3,maxRetries:0,retryDelayMs:5e3,awaitReplyTimeoutMs:1e3,...e,logger:{info:console.log,warn:console.warn,error:console.error,debug:console.log,...e?.logger}},{idToken:g,host:M,port:i,maxRetries:y,retryDelayMs:k,awaitReplyTimeoutMs:z,logger:n}=o,[E,_]=u(),[I,O]=u(),[J,F]=u(),l,S=()=>{x=void 0;let s=$.default||$;console.log({Ws:s}),l=new s(`ws://${M}:${i}`),l.onmessage=p=>{let{data:c}=p;if(typeof c!=\"string\")throw new Error(`Unsupported data type ${c}`);let h=f.unpack(c);_(h)},l.onopen=()=>{t=0,n.debug(\"connected\"),n.debug(\"listening for data\"),g&&P({idToken:g}).then(()=>{r=!0,O({attempt:t})}).catch(p=>{n.error(\"Error logging in\",p),a(),T()})},l.onclose=()=>{n.debug(\"close\"),a(),T()},l.onerror=p=>{n.error(p),a(),T()};let a=()=>{n.debug(\"Cleaning up\"),l.close(),r=!1,F({attempt:t})}},x,T=()=>{if(!x){if(n.debug(\"scheduling reconnect\"),y&&t>=y){n.debug(\"Max retries exceeded\");return}t++,x=setTimeout(()=>{n.debug(\"attempting reconnect now\"),S()},k)}};S();let G=async(s,a)=>{let[p,c]=f.pack(s,a);return n.debug({certified:c}),new Promise((h,W)=>{let v=setTimeout(()=>{C(),W(new Error(`Timed out awaiting reply to ${c.id}`))},z),C=E(D=>{D.refId===c.id&&(C(),clearTimeout(v),h(D))});N(p).catch(D=>{C(),clearTimeout(v),W(new Error(\"Error sending. Trigger reconnect\"))})})},K=(s,a)=>{let[p]=f.pack(s,a);N(p).catch(c=>{n.error(\"Error sending message\",c)})},P=s=>G(m.Login,s),Q=async s=>{K(m.PositionUpdate,s)},N=async s=>l.send(s),[V,X]=u(),Y={[m.NearbyEntities]:X};return E(s=>{let a=Y[s.type];!a||a(s.message)}),{close:()=>l.close(),login:P,updatePosition:Q,onConnect:I,onDisconnect:J,isConnected:()=>r,onNearbyEntities:V}};var B=()=>({type:\"heartbeat\"});var{log:b}=window,j=()=>{window.send(B()),setTimeout(j,500)};j();window.onMessage(e=>{let t=e;b(\"Rx main->worker\",{_msg:t});let o={}[t.type];if(!o)throw new Error(`Message type ${t.type} is not implemented`);o(t)});var Fe=q({logger:{info:b,debug:b,error:b,warn:b}});})();\n//# sourceMappingURL=data:application/json;base64,\n";

